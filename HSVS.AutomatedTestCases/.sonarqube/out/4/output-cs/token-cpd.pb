Â 
uD:\AccionLabs\Help\AutomatedTestCases\HSVS.AutomatedTestCases\HSVS.AutomatedTestCases.BusinessLogic\BeginTestCases.cs
	namespace 	
HSVS
 
. 
AutomatedTestCases !
.! "
BusinessLogic" /
{ 
public 

class 
BeginTestCases 
{ 
readonly 
LogFileHelper 
_logger &
;& '
DataGenerator 
_objDataGen !
;! "
public 
BeginTestCases 
( 
) 
{ 	
_logger 
= 
new 
LogFileHelper '
(' (
)( )
;) *
_objDataGen 
= 
new 
DataGenerator +
(+ ,
), -
;- .
} 	
public 
void 
InsertSampleData $
($ %
int% (
id) +
,+ ,
string- 3
name4 8
,8 9
string: @
mobileA G
)G H
{ 	%
TruncateTable_Destination %
(% &
$str& 0
)0 1
;1 2
string 
myQuery 
= 
$str 
;  
myQuery 
= 
$str 4
+5 6
id7 9
+: ;
$str< A
+B C
nameD H
+I J
$strK Q
+R S
mobileT Z
+[ \
$str] a
;a b
DataAccessLayer   
objDAL   "
=  # $
new  % (
DataAccessLayer  ) 8
(  8 9
)  9 :
;  : ;
objDAL!! 
.!! (
GenericExecution_Destination!! /
(!!/ 0
myQuery!!0 7
)!!7 8
;!!8 9
}"" 	
public## 
int## #
GetSampleTableDataCount## *
(##* +
)##+ ,
{$$ 	
int%% 
retVal%% 
=%% 
$num%% 
;%% 
string&& 
myQuery&& 
=&& 
$str&& 
;&&  
myQuery'' 
='' 
$str'' ?
;''? @
DataAccessLayer(( 
objDAL(( "
=((# $
new((% (
DataAccessLayer(() 8
(((8 9
)((9 :
;((: ;
	DataTable)) 
dt)) 
=)) 
objDAL)) !
.))! "(
GenericExecution_Destination))" >
())> ?
myQuery))? F
)))F G
;))G H
if** 
(** 
dt** 
!=** 
null** 
&&** 
dt**  
.**  !
Rows**! %
.**% &
Count**& +
>**, -
$num**. /
)**/ 0
{++ 
return-- 
Convert-- 
.-- 
ToInt32-- &
(--& '
dt--' )
.--) *
Rows--* .
[--. /
$num--/ 0
]--0 1
[--1 2
$num--2 3
]--3 4
)--4 5
;--5 6
}// 
return00 
retVal00 
;00 
}11 	
public22 
void22 %
TruncateTable_Destination22 -
(22- .
string22. 4
	tableName225 >
)22> ?
{33 	
string44 
myQuery44 
=44 
$str44 
;44  
myQuery55 
=55 
$str55 '
+55( )
	tableName55* 3
;553 4
DataAccessLayer66 
objDAL66 "
=66# $
new66% (
DataAccessLayer66) 8
(668 9
)669 :
;66: ;
objDAL77 
.77 (
GenericExecution_Destination77 /
(77/ 0
myQuery770 7
)777 8
;778 9
}88 	
public:: 
void::  
InsertDatatoLineItem:: (
(::( )
)::) *
{;; 	
List== 
<== 
public_lineitem==  
>==  !
lstLineItem==" -
===. /
_objDataGen==0 ;
.==; <
GenerateLineItem==< L
(==L M
)==M N
;==N O
BusinessLogicLayer?? 
objBusiness?? *
=??+ ,
new??- 0
BusinessLogicLayer??1 C
(??C D
)??D E
;??E F
	DataTable@@ 
dt@@ 
=@@ 
objBusiness@@ &
.@@& '
CreateDataTable@@' 6
(@@6 7
lstLineItem@@7 B
)@@B C
;@@C D
objBusinessBB 
.BB 
InsertDatatoTableBB )
(BB) *
$strBB* ;
,BB; <
dtBB= ?
)BB? @
;BB@ A
}DD 	
publicEE 
	DataTableEE $
GetActivePatients_AssertEE 1
(EE1 2
intEE2 5
hidEE6 9
,EE9 :
stringEE; A
rundateEEB I
,EEI J
stringEEK Q
intervalEER Z
)EEZ [
{FF 	
ListGG 
<GG 
public_lineitemGG  
>GG  !
lstLineItemGG" -
=GG. /
_objDataGenGG0 ;
.GG; <
GenerateLineItemGG< L
(GGL M
)GGM N
;GGN O
BusinessLogicLayerHH 
objBusinessHH *
=HH+ ,
newHH- 0
BusinessLogicLayerHH1 C
(HHC D
)HHD E
;HHE F
	DataTableII 
dtII 
=II 
objBusinessII &
.II& '
CreateDataTableII' 6
(II6 7
lstLineItemII7 B
)IIB C
;IIC D
returnJJ 
dtJJ 
;JJ 
}KK 	
publicOO 
	DataTableOO 
GetActivePatientsOO *
(OO* +
intOO+ .
hidOO/ 2
,OO2 3
stringOO4 :
rundateOO; B
,OOB C
stringOOD J
intervalOOK S
)OOS T
{PP 	
stringQQ 
myQueryQQ 
=QQ 
$strQQ 
;QQ  
myQueryRR 
=RR 
$strRR M
+RRN O
hidRRP S
+RRT U
$strRRV Z
+RR[ \
intervalRR] e
+RRf g
$strRRh m
+RRn o
rundateRRp w
+RRx y
$strRRz ~
;RR~ 
DataAccessLayerSS 
objDALSS "
=SS# $
newSS% (
DataAccessLayerSS) 8
(SS8 9
)SS9 :
;SS: ;
	DataTableTT 
dtTT 
=TT 
objDALTT !
.TT! "(
GenericExecution_DestinationTT" >
(TT> ?
myQueryTT? F
)TTF G
;TTG H
returnUU 
dtUU 
;UU 
}VV 	
publicWW 
ListWW 
<WW 
public_lineitemWW #
>WW# $$
GetActivePatientsConvertWW% =
(WW= >
intWW> A
hidWWB E
,WWE F
stringWWG M
rundateWWN U
,WWU V
stringWWW ]
intervalWW^ f
)WWf g
{XX 	
ListYY 
<YY 
public_lineitemYY  
>YY  !
lstYY" %
=YY& '
newYY( +
ListYY, 0
<YY0 1
public_lineitemYY1 @
>YY@ A
(YYA B
)YYB C
;YYC D
	DataTableZZ 
dtResultZZ 
=ZZ  
GetActivePatientsZZ! 2
(ZZ2 3
hidZZ3 6
,ZZ6 7
rundateZZ8 ?
,ZZ? @
intervalZZA I
)ZZI J
;ZZJ K
for[[ 
([[ 
var[[ 
i[[ 
=[[ 
$num[[ 
;[[ 
i[[ 
<[[ 
dtResult[[  (
.[[( )
Rows[[) -
.[[- .
Count[[. 3
;[[3 4
i[[5 6
++[[6 8
)[[8 9
{\\ 
public_lineitem]] 
pb]]  "
=]]# $
new]]% (
public_lineitem]]) 8
(]]8 9
)]]9 :
;]]: ;
pb^^ 
.^^ 
	client_id^^ 
=^^ 
Convert^^ &
.^^& '
ToInt32^^' .
(^^. /
dtResult^^/ 7
.^^7 8
Rows^^8 <
[^^< =
i^^= >
]^^> ?
[^^? @
$str^^@ K
]^^K L
)^^L M
;^^M N
pb__ 
.__ 

patient_id__ 
=__ 
Convert__  '
.__' (
ToInt32__( /
(__/ 0
dtResult__0 8
.__8 9
Rows__9 =
[__= >
i__> ?
]__? @
[__@ A
$str__A M
]__M N
)__N O
;__O P
pb`` 
.`` 
hid`` 
=`` 
Convert``  
.``  !
ToInt32``! (
(``( )
dtResult``) 1
.``1 2
Rows``2 6
[``6 7
i``7 8
]``8 9
[``9 :
$str``: ?
]``? @
)``@ A
;``A B
lstaa 
.aa 
Addaa 
(aa 
pbaa 
)aa 
;aa 
}bb 
returncc 
lstcc 
;cc 
}dd 	
publicff 
boolff 
GetDifferentRecordsff '
(ff' (
	DataTableff( 1
FirstDataTableff2 @
,ff@ A
	DataTableffB K
SecondDataTableffL [
)ff[ \
{gg 	
	DataTablejj 
ResultDataTablejj %
=jj& '
newjj( +
	DataTablejj, 5
(jj5 6
$strjj6 G
)jjG H
;jjH I
usingmm 
(mm 
DataSetmm 
dsmm 
=mm 
newmm  #
DataSetmm$ +
(mm+ ,
)mm, -
)mm- .
{nn 
dsqq 
.qq 
Tablesqq 
.qq 
AddRangeqq "
(qq" #
newqq# &
	DataTableqq' 0
[qq0 1
]qq1 2
{qq3 4
FirstDataTableqq5 C
.qqC D
CopyqqD H
(qqH I
)qqI J
,qqJ K
SecondDataTableqqL [
.qq[ \
Copyqq\ `
(qq` a
)qqa b
}qqc d
)qqd e
;qqe f

DataColumntt 
[tt 
]tt 
firstColumnstt )
=tt* +
newtt, /

DataColumntt0 :
[tt: ;
dstt; =
.tt= >
Tablestt> D
[ttD E
$numttE F
]ttF G
.ttG H
ColumnsttH O
.ttO P
CountttP U
]ttU V
;ttV W
foruu 
(uu 
intuu 
iuu 
=uu 
$numuu 
;uu 
iuu  !
<uu" #
firstColumnsuu$ 0
.uu0 1
Lengthuu1 7
;uu7 8
iuu9 :
++uu: <
)uu< =
{vv 
firstColumnsww  
[ww  !
iww! "
]ww" #
=ww$ %
dsww& (
.ww( )
Tablesww) /
[ww/ 0
$numww0 1
]ww1 2
.ww2 3
Columnsww3 :
[ww: ;
iww; <
]ww< =
;ww= >
}xx 

DataColumnzz 
[zz 
]zz 
secondColumnszz *
=zz+ ,
newzz- 0

DataColumnzz1 ;
[zz; <
dszz< >
.zz> ?
Tableszz? E
[zzE F
$numzzF G
]zzG H
.zzH I
ColumnszzI P
.zzP Q
CountzzQ V
]zzV W
;zzW X
for{{ 
({{ 
int{{ 
i{{ 
={{ 
$num{{ 
;{{ 
i{{  !
<{{" #
secondColumns{{$ 1
.{{1 2
Length{{2 8
;{{8 9
i{{: ;
++{{; =
){{= >
{|| 
secondColumns}} !
[}}! "
i}}" #
]}}# $
=}}% &
ds}}' )
.}}) *
Tables}}* 0
[}}0 1
$num}}1 2
]}}2 3
.}}3 4
Columns}}4 ;
[}}; <
i}}< =
]}}= >
;}}> ?
}~~ 
DataRelation
 
r1
 
=
  !
new
" %
DataRelation
& 2
(
2 3
string
3 9
.
9 :
Empty
: ?
,
? @
firstColumns
A M
,
M N
secondColumns
O \
,
\ ]
false
^ c
)
c d
;
d e
ds
 
.
 
	Relations
 
.
 
Add
  
(
  !
r1
! #
)
# $
;
$ %
DataRelation
 
r2
 
=
  !
new
" %
DataRelation
& 2
(
2 3
string
3 9
.
9 :
Empty
: ?
,
? @
secondColumns
A N
,
N O
firstColumns
P \
,
\ ]
false
^ c
)
c d
;
d e
ds
 
.
 
	Relations
 
.
 
Add
  
(
  !
r2
! #
)
# $
;
$ %
for
 
(
 
int
 
i
 
=
 
$num
 
;
 
i
  !
<
" #
FirstDataTable
$ 2
.
2 3
Columns
3 :
.
: ;
Count
; @
;
@ A
i
B C
++
C E
)
E F
{
 
ResultDataTable
 #
.
# $
Columns
$ +
.
+ ,
Add
, /
(
/ 0
FirstDataTable
0 >
.
> ?
Columns
? F
[
F G
i
G H
]
H I
.
I J

ColumnName
J T
,
T U
FirstDataTable
V d
.
d e
Columns
e l
[
l m
i
m n
]
n o
.
o p
DataType
p x
)
x y
;
y z
}
 
ResultDataTable
 
.
  
BeginLoadData
  -
(
- .
)
. /
;
/ 0
foreach
 
(
 
DataRow
  
	parentrow
! *
in
+ -
ds
. 0
.
0 1
Tables
1 7
[
7 8
$num
8 9
]
9 :
.
: ;
Rows
; ?
)
? @
{
 
DataRow
 
[
 
]
 
	childrows
 '
=
( )
	parentrow
* 3
.
3 4
GetChildRows
4 @
(
@ A
r1
A C
)
C D
;
D E
if
 
(
 
	childrows
 !
==
" $
null
% )
||
* ,
	childrows
- 6
.
6 7
Length
7 =
==
> @
$num
A B
)
B C
ResultDataTable
 '
.
' (
LoadDataRow
( 3
(
3 4
	parentrow
4 =
.
= >
	ItemArray
> G
,
G H
true
I M
)
M N
;
N O
}
 
foreach
 
(
 
DataRow
  
	parentrow
! *
in
+ -
ds
. 0
.
0 1
Tables
1 7
[
7 8
$num
8 9
]
9 :
.
: ;
Rows
; ?
)
? @
{
 
DataRow
 
[
 
]
 
	childrows
 '
=
( )
	parentrow
* 3
.
3 4
GetChildRows
4 @
(
@ A
r2
A C
)
C D
;
D E
if
 
(
 
	childrows
 !
==
" $
null
% )
||
* ,
	childrows
- 6
.
6 7
Length
7 =
==
> @
$num
A B
)
B C
ResultDataTable
 '
.
' (
LoadDataRow
( 3
(
3 4
	parentrow
4 =
.
= >
	ItemArray
> G
,
G H
true
I M
)
M N
;
N O
}
 
ResultDataTable
 
.
  
EndLoadData
  +
(
+ ,
)
, -
;
- .
}
 
if
 
(
 
ResultDataTable
 
.
  
Rows
  $
.
$ %
Count
% *
==
+ -
$num
. /
)
/ 0
{
   
return
¡¡ 
true
¡¡ 
;
¡¡ 
}
££ 
else
¤¤ 
{
¥¥ 
return
¦¦ 
false
¦¦ 
;
¦¦ 
}
§§ 
}
©© 	
public
¬¬ 
int
¬¬ #
Patient_Species_Check
¬¬ (
(
¬¬( )
int
¬¬) ,
hid
¬¬- 0
,
¬¬0 1
long
¬¬2 6
	patientid
¬¬7 @
,
¬¬@ A
string
¬¬B H

speciesIds
¬¬I S
)
¬¬S T
{
­­ 	
int
®® 
retVal
®® 
=
®® 
$num
®® 
;
®® 
string
¯¯ 
myQuery
¯¯ 
=
¯¯ 
$str
¯¯ 
;
¯¯  
myQuery
°° 
=
°° 
$str
°° O
+
°°P Q
hid
°°R U
+
°°V W
$str
°°X [
+
°°\ ]
	patientid
°°^ g
+
°°h i
$str
°°j n
+
°°o p

speciesIds
°°q {
+
°°| }
$str°°~ 
;°° 
DataAccessLayer
±± 
objDAL
±± "
=
±±# $
new
±±% (
DataAccessLayer
±±) 8
(
±±8 9
)
±±9 :
;
±±: ;
	DataTable
²² 
dt
²² 
=
²² 
objDAL
²² !
.
²²! "%
GenericExecution_Source
²²" 9
(
²²9 :
myQuery
²²: A
)
²²A B
;
²²B C
if
³³ 
(
³³ 
dt
³³ 
!=
³³ 
null
³³ 
&&
³³ 
dt
³³  
.
³³  !
Rows
³³! %
.
³³% &
Count
³³& +
>
³³, -
$num
³³. /
)
³³/ 0
{
´´ 
return
¶¶ 
Convert
¶¶ 
.
¶¶ 
ToInt32
¶¶ &
(
¶¶& '
dt
¶¶' )
.
¶¶) *
Rows
¶¶* .
[
¶¶. /
$num
¶¶/ 0
]
¶¶0 1
[
¶¶1 2
$num
¶¶2 3
]
¶¶3 4
)
¶¶4 5
;
¶¶5 6
}
¸¸ 
return
¹¹ 
retVal
¹¹ 
;
¹¹ 
}
ºº 	
public
¼¼ 
int
¼¼ (
Patient_Age_Criteria_Check
¼¼ -
(
¼¼- .
int
¼¼. 1
hid
¼¼2 5
,
¼¼5 6
long
¼¼7 ;
	patientid
¼¼< E
,
¼¼E F
string
¼¼G M
startInterval
¼¼N [
,
¼¼[ \
string
¼¼] c
endInterval
¼¼d o
)
¼¼o p
{
½½ 	
int
¾¾ 
retVal
¾¾ 
=
¾¾ 
$num
¾¾ 
;
¾¾ 
string
¿¿ 
myQuery
¿¿ 
=
¿¿ 
$str
¿¿ 
;
¿¿  
myQuery
ÀÀ 
=
ÀÀ 
$str
ÀÀ T
+
ÀÀU V
hid
ÀÀW Z
+
ÀÀ[ \
$str
ÀÀ] `
+
ÀÀ` a
	patientid
ÀÀb k
+
ÀÀl m
$str
ÀÀn r
+
ÀÀr s
startIntervalÀÀt 
+ÀÀ 
$strÀÀ 
+ÀÀ 
endIntervalÀÀ 
+ÀÀ 
$strÀÀ 
;ÀÀ 
DataAccessLayer
ÁÁ 
objDAL
ÁÁ "
=
ÁÁ# $
new
ÁÁ% (
DataAccessLayer
ÁÁ) 8
(
ÁÁ8 9
)
ÁÁ9 :
;
ÁÁ: ;
	DataTable
ÂÂ 
dt
ÂÂ 
=
ÂÂ 
objDAL
ÂÂ !
.
ÂÂ! "%
GenericExecution_Source
ÂÂ" 9
(
ÂÂ9 :
myQuery
ÂÂ: A
)
ÂÂA B
;
ÂÂB C
if
ÃÃ 
(
ÃÃ 
dt
ÃÃ 
!=
ÃÃ 
null
ÃÃ 
&&
ÃÃ 
dt
ÃÃ  
.
ÃÃ  !
Rows
ÃÃ! %
.
ÃÃ% &
Count
ÃÃ& +
>
ÃÃ, -
$num
ÃÃ. /
)
ÃÃ/ 0
{
ÄÄ 
return
ÆÆ 
Convert
ÆÆ 
.
ÆÆ 
ToInt32
ÆÆ &
(
ÆÆ& '
dt
ÆÆ' )
.
ÆÆ) *
Rows
ÆÆ* .
[
ÆÆ. /
$num
ÆÆ/ 0
]
ÆÆ0 1
[
ÆÆ1 2
$num
ÆÆ2 3
]
ÆÆ3 4
)
ÆÆ4 5
;
ÆÆ5 6
}
ÈÈ 
return
ÉÉ 
retVal
ÉÉ 
;
ÉÉ 
}
ÊÊ 	
public
ÍÍ 
int
ÍÍ )
Patient_Species_Breed_Check
ÍÍ .
(
ÍÍ. /
int
ÍÍ/ 2
hid
ÍÍ3 6
,
ÍÍ6 7
long
ÍÍ8 <
	patientid
ÍÍ= F
,
ÍÍF G
string
ÍÍH N

speciesIds
ÍÍO Y
,
ÍÍY Z
string
ÍÍ[ a
breedIds
ÍÍb j
)
ÍÍj k
{
ÎÎ 	
int
ÏÏ 
retVal
ÏÏ 
=
ÏÏ 
$num
ÏÏ 
;
ÏÏ 
string
ÐÐ 
myQuery
ÐÐ 
=
ÐÐ 
$str
ÐÐ 
;
ÐÐ  
myQuery
ÑÑ 
=
ÑÑ 
$str
ÑÑ M
+
ÑÑN O
hid
ÑÑP S
+
ÑÑT U
$str
ÑÑV Y
+
ÑÑZ [
	patientid
ÑÑ\ e
+
ÑÑf g
$str
ÑÑh l
+
ÑÑm n

speciesIds
ÑÑo y
+
ÑÑz {
$strÑÑ| 
+ÑÑ 
breedIdsÑÑ 
+ÑÑ 
$strÑÑ 
;ÑÑ 
DataAccessLayer
ÒÒ 
objDAL
ÒÒ "
=
ÒÒ# $
new
ÒÒ% (
DataAccessLayer
ÒÒ) 8
(
ÒÒ8 9
)
ÒÒ9 :
;
ÒÒ: ;
	DataTable
ÓÓ 
dt
ÓÓ 
=
ÓÓ 
objDAL
ÓÓ !
.
ÓÓ! "%
GenericExecution_Source
ÓÓ" 9
(
ÓÓ9 :
myQuery
ÓÓ: A
)
ÓÓA B
;
ÓÓB C
if
ÔÔ 
(
ÔÔ 
dt
ÔÔ 
!=
ÔÔ 
null
ÔÔ 
&&
ÔÔ 
dt
ÔÔ  
.
ÔÔ  !
Rows
ÔÔ! %
.
ÔÔ% &
Count
ÔÔ& +
>
ÔÔ, -
$num
ÔÔ. /
)
ÔÔ/ 0
{
ÕÕ 
return
×× 
Convert
×× 
.
×× 
ToInt32
×× &
(
××& '
dt
××' )
.
××) *
Rows
××* .
[
××. /
$num
××/ 0
]
××0 1
[
××1 2
$num
××2 3
]
××3 4
)
××4 5
;
××5 6
}
ÙÙ 
return
ÚÚ 
retVal
ÚÚ 
;
ÚÚ 
}
ÛÛ 	
public
ÝÝ 
int
ÝÝ &
Patient_Last_Visit_Check
ÝÝ +
(
ÝÝ+ ,
int
ÝÝ, /
hid
ÝÝ0 3
,
ÝÝ3 4
long
ÝÝ5 9
	patientid
ÝÝ: C
,
ÝÝC D
string
ÝÝE K
	lastvisit
ÝÝL U
,
ÝÝU V
string
ÝÝW ]
lastvisitFrom
ÝÝ^ k
,
ÝÝk l
string
ÝÝm s
lastvisitTo
ÝÝt 
)ÝÝ 
{
ÞÞ 	 
BusinessLogicLayer
ßß 
bll
ßß "
=
ßß# $
new
ßß% ( 
BusinessLogicLayer
ßß) ;
(
ßß; <
)
ßß< =
;
ßß= >
int
àà 
retVal
àà 
=
àà 
$num
àà 
;
àà 
string
áá 
myQuery
áá 
=
áá 
$str
áá 
;
áá  
myQuery
ââ 
=
ââ 
$str
ââ F
+
ââG H
hid
ââI L
+
ââM N
$str
ââO R
+
ââS T
	patientid
ââU ^
+
ââ_ `
$str
ââa d
+
ââe f
bll
ââg j
.
ââj k
ReturnNullIfEmpty
ââk |
(
ââ| }
	lastvisitââ} 
)ââ 
+ââ 
$strââ 
+ââ 
bllââ 
.ââ !
ReturnNullIfEmptyââ ¥
(ââ¥ ¦
lastvisitFromââ¦ ³
)ââ³ ´
+ââµ ¶
$strââ· º
+ââ» ¼
bllââ½ À
.ââÀ Á!
ReturnNullIfEmptyââÁ Ò
(ââÒ Ó
lastvisitToââÓ Þ
)ââÞ ß
+ââà á
$strâââ ì
;ââì í
DataAccessLayer
ãã 
objDAL
ãã "
=
ãã# $
new
ãã% (
DataAccessLayer
ãã) 8
(
ãã8 9
)
ãã9 :
;
ãã: ;
	DataTable
ää 
dt
ää 
=
ää 
objDAL
ää !
.
ää! "%
GenericExecution_Source
ää" 9
(
ää9 :
myQuery
ää: A
)
ääA B
;
ääB C
if
åå 
(
åå 
dt
åå 
!=
åå 
null
åå 
&&
åå 
dt
åå  
.
åå  !
Rows
åå! %
.
åå% &
Count
åå& +
>
åå, -
$num
åå. /
)
åå/ 0
{
ææ 
return
èè 
Convert
èè 
.
èè 
ToInt32
èè &
(
èè& '
dt
èè' )
.
èè) *
Rows
èè* .
[
èè. /
$num
èè/ 0
]
èè0 1
[
èè1 2
$num
èè2 3
]
èè3 4
)
èè4 5
;
èè5 6
}
êê 
return
ëë 
retVal
ëë 
;
ëë 
}
ìì 	
public
îî 
int
îî %
Patient_Inclusion_Check
îî *
(
îî* +
int
îî+ .
hid
îî/ 2
,
îî2 3
long
îî4 8
	patientid
îî9 B
,
îîB C
bool
îîC G
matchanyservice
îîH W
,
îîW X
string
îîY _ 
includedServiceIds
îî` r
,
îîr s
string
îîs y
includedIntervalîîz 
)îî 
{
ïï 	 
BusinessLogicLayer
ðð 
bll
ðð "
=
ðð# $
new
ðð% ( 
BusinessLogicLayer
ðð) ;
(
ðð; <
)
ðð< =
;
ðð= >
int
ññ 
retVal
ññ 
=
ññ 
$num
ññ 
;
ññ 
string
òò 
myQuery
òò 
=
òò 
$str
òò 
;
òò  
myQuery
óó 
=
óó 
$str
óó I
+
óóJ K
hid
óóL O
+
óóP Q
$str
óóR U
+
óóV W
	patientid
óóX a
+
óób c
$str
óód g
+
óóh i
matchanyservice
óój y
+
óóz {
$str
óó| 
+óó 
bllóó 
.óó !
ReturnNullIfEmptyóó 
(óó "
includedServiceIdsóó ª
)óóª «
+óó¬ ­
$stróó® ±
+óó² ³
bllóó´ ·
.óó· ¸!
ReturnNullIfEmptyóó¸ É
(óóÉ Ê 
includedIntervalóóÊ Ú
)óóÚ Û
+óóÜ Ý
$stróóÞ á
;óóá â
DataAccessLayer
ôô 
objDAL
ôô "
=
ôô# $
new
ôô% (
DataAccessLayer
ôô) 8
(
ôô8 9
)
ôô9 :
;
ôô: ;
	DataTable
õõ 
dt
õõ 
=
õõ 
objDAL
õõ !
.
õõ! "%
GenericExecution_Source
õõ" 9
(
õõ9 :
myQuery
õõ: A
)
õõA B
;
õõB C
if
öö 
(
öö 
dt
öö 
!=
öö 
null
öö 
&&
öö 
dt
öö  
.
öö  !
Rows
öö! %
.
öö% &
Count
öö& +
>
öö, -
$num
öö. /
)
öö/ 0
{
÷÷ 
return
ùù 
Convert
ùù 
.
ùù 
ToInt32
ùù &
(
ùù& '
dt
ùù' )
.
ùù) *
Rows
ùù* .
[
ùù. /
$num
ùù/ 0
]
ùù0 1
[
ùù1 2
$num
ùù2 3
]
ùù3 4
)
ùù4 5
;
ùù5 6
}
ûû 
return
üü 
retVal
üü 
;
üü 
}
ýý 	
public
ÿÿ 
int
ÿÿ %
Patient_Exclusion_Check
ÿÿ *
(
ÿÿ* +
int
ÿÿ+ .
hid
ÿÿ/ 2
,
ÿÿ2 3
long
ÿÿ4 8
	patientid
ÿÿ9 B
,
ÿÿB C
bool
ÿÿD H
matchanyservice
ÿÿI X
,
ÿÿX Y
string
ÿÿZ ` 
excludedServiceIds
ÿÿa s
,
ÿÿs t
string
ÿÿu {
excludedIntervalÿÿ| 
)ÿÿ 
{
 	 
BusinessLogicLayer
 
bll
 "
=
# $
new
% ( 
BusinessLogicLayer
) ;
(
; <
)
< =
;
= >
int
 
retVal
 
=
 
$num
 
;
 
string
 
myQuery
 
=
 
$str
 
;
  
myQuery
 
=
 
$str
 I
+
J K
hid
L O
+
P Q
$str
R U
+
V W
	patientid
X a
+
b c
$str
d g
+
h i
matchanyservice
j y
+
z {
$str
| 
+ 
bll 
. !
ReturnNullIfEmpty 
( "
excludedServiceIds ª
)ª «
+¬ ­
$str® ±
+² ³
bll´ ·
.· ¸!
ReturnNullIfEmpty¸ É
(É Ê 
excludedIntervalÊ Ú
)Ú Û
+Ü Ý
$strÞ á
;á â
DataAccessLayer
 
objDAL
 "
=
# $
new
% (
DataAccessLayer
) 8
(
8 9
)
9 :
;
: ;
	DataTable
 
dt
 
=
 
objDAL
 !
.
! "%
GenericExecution_Source
" 9
(
9 :
myQuery
: A
)
A B
;
B C
if
 
(
 
dt
 
!=
 
null
 
&&
 
dt
  
.
  !
Rows
! %
.
% &
Count
& +
>
, -
$num
. /
)
/ 0
{
 
return
 
Convert
 
.
 
ToInt32
 &
(
& '
dt
' )
.
) *
Rows
* .
[
. /
$num
/ 0
]
0 1
[
1 2
$num
2 3
]
3 4
)
4 5
;
5 6
}
 
return
 
retVal
 
;
 
}
 	
public
 
	DataTable
 
	Targeting
 "
(
" #$
CustomEmail3_Targeting
# 9
obj
: =
)
= >
{
 	 
BusinessLogicLayer
 
bll
 "
=
# $
new
% ( 
BusinessLogicLayer
) ;
(
; <
)
< =
;
= >
int
 
retVal
 
=
 
$num
 
;
 
string
 
myQuery
 
=
 
$str
 
;
  
myQuery
 
=
 
myQuery
 
+
 
$str
  K
;
K L
myQuery
 
=
 
myQuery
 
+
 
$str
  #
;
# $
myQuery
 
=
 
myQuery
 
+
 
obj
  #
.
# $
in_hid
$ *
+
+ ,
$str
- 0
;
0 1
myQuery
 
=
 
myQuery
 
+
 
obj
  #
.
# $!
in_editor_verion_id
$ 7
+
8 9
$str
: =
;
= >
myQuery
 
=
 
myQuery
 
+
 
obj
  #
.
# $!
in_marketing_msg_id
$ 7
+
8 9
$str
: =
;
= >
myQuery
 
=
 
myQuery
 
+
 
obj
  #
.
# $
is_other_species
$ 4
+
5 6
$str
7 :
;
: ;
myQuery
 
=
 
myQuery
 
+
 
obj
  #
.
# $
is_all_breed
$ 0
+
1 2
$str
3 6
;
6 7
myQuery
 
=
 
myQuery
 
+
 
bll
  #
.
# $
ReturnNullIfEmpty
$ 5
(
5 6
obj
6 9
.
9 :
in_breed_ids
: F
)
F G
+
H I
$str
J M
;
M N
myQuery
 
=
 
myQuery
 
+
 
obj
  #
.
# $ 
in_is_age_in_range
$ 6
+
7 8
$str
9 <
;
< =
myQuery
 
=
 
myQuery
 
+
 
obj
  #
.
# $ 
in_is_specific_age
$ 6
+
7 8
$str
9 <
;
< =
myQuery
¡¡ 
=
¡¡ 
myQuery
¡¡ 
+
¡¡ 
bll
¡¡  #
.
¡¡# $
ReturnNullIfEmpty
¡¡$ 5
(
¡¡5 6
obj
¡¡6 9
.
¡¡9 :
in_specific_age
¡¡: I
)
¡¡I J
+
¡¡K L
$str
¡¡M P
;
¡¡P Q
myQuery
¢¢ 
=
¢¢ 
myQuery
¢¢ 
+
¢¢ 
bll
¢¢  #
.
¢¢# $
ReturnNullIfEmpty
¢¢$ 5
(
¢¢5 6
obj
¢¢6 9
.
¢¢9 :
in_age_range_from
¢¢: K
)
¢¢K L
+
¢¢M N
$str
¢¢O R
;
¢¢R S
myQuery
££ 
=
££ 
myQuery
££ 
+
££ 
bll
££  #
.
££# $
ReturnNullIfEmpty
££$ 5
(
££5 6
obj
££6 9
.
££9 :
in_age_range_to
££: I
)
££I J
+
££K L
$str
££M P
;
££P Q
myQuery
¤¤ 
=
¤¤ 
myQuery
¤¤ 
+
¤¤ 
bll
¤¤  #
.
¤¤# $
ReturnNullIfEmpty
¤¤$ 5
(
¤¤5 6
obj
¤¤6 9
.
¤¤9 :
in_last_service
¤¤: I
)
¤¤I J
+
¤¤K L
$str
¤¤M P
;
¤¤P Q
myQuery
¥¥ 
=
¥¥ 
myQuery
¥¥ 
+
¥¥ 
bll
¥¥  #
.
¥¥# $
ReturnNullIfEmpty
¥¥$ 5
(
¥¥5 6
obj
¥¥6 9
.
¥¥9 :"
in_last_service_from
¥¥: N
)
¥¥N O
+
¥¥P Q
$str
¥¥R U
;
¥¥U V
myQuery
¦¦ 
=
¦¦ 
myQuery
¦¦ 
+
¦¦ 
bll
¦¦  #
.
¦¦# $
ReturnNullIfEmpty
¦¦$ 5
(
¦¦5 6
obj
¦¦6 9
.
¦¦9 : 
in_last_service_to
¦¦: L
)
¦¦L M
+
¦¦N O
$str
¦¦P S
;
¦¦S T
myQuery
§§ 
=
§§ 
myQuery
§§ 
+
§§ 
bll
§§  #
.
§§# $
ReturnNullIfEmpty
§§$ 5
(
§§5 6
obj
§§6 9
.
§§9 :%
in_included_service_ids
§§: Q
)
§§Q R
+
§§S T
$str
§§U X
;
§§X Y
myQuery
¨¨ 
=
¨¨ 
myQuery
¨¨ 
+
¨¨ 
obj
¨¨  #
.
¨¨# $+
in_match_any_included_service
¨¨$ A
+
¨¨B C
$str
¨¨D G
;
¨¨G H
myQuery
©© 
=
©© 
myQuery
©© 
+
©© 
obj
©©  #
.
©©# $+
in_match_any_excluded_service
©©$ A
+
©©B C
$str
©©D G
;
©©G H
myQuery
ªª 
=
ªª 
myQuery
ªª 
+
ªª 
bll
ªª  #
.
ªª# $
ReturnNullIfEmpty
ªª$ 5
(
ªª5 6
obj
ªª6 9
.
ªª9 :&
in_included_last_service
ªª: R
)
ªªR S
+
ªªT U
$str
ªªV Y
;
ªªY Z
myQuery
«« 
=
«« 
myQuery
«« 
+
«« 
bll
««  #
.
««# $
ReturnNullIfEmpty
««$ 5
(
««5 6
obj
««6 9
.
««9 :%
in_excluded_service_ids
««: Q
)
««Q R
+
««S T
$str
««U X
;
««X Y
myQuery
¬¬ 
=
¬¬ 
myQuery
¬¬ 
+
¬¬ 
bll
¬¬ "
.
¬¬" #
ReturnNullIfEmpty
¬¬# 4
(
¬¬4 5
obj
¬¬5 8
.
¬¬8 9&
in_excluded_last_service
¬¬9 Q
)
¬¬Q R
;
¬¬R S
myQuery
®® 
=
®® 
myQuery
®® 
+
®® 
$str
®®  #
;
®®# $
DataAccessLayer
¯¯ 
objDAL
¯¯ "
=
¯¯# $
new
¯¯% (
DataAccessLayer
¯¯) 8
(
¯¯8 9
)
¯¯9 :
;
¯¯: ;
	DataTable
°° 
dt
°° 
=
°° 
objDAL
°° !
.
°°! "%
GenericExecution_Source
°°" 9
(
°°9 :
myQuery
°°: A
)
°°A B
;
°°B C
return
·· 
dt
·· 
;
·· 
}
¸¸ 	
}
¾¾ 
}¿¿ ®
yD:\AccionLabs\Help\AutomatedTestCases\HSVS.AutomatedTestCases\HSVS.AutomatedTestCases.BusinessLogic\BusinessLogicLayer.cs
	namespace 	
HSVS
 
. 
AutomatedTestCases !
.! "
BusinessLogic" /
{ 
public 

class 
BusinessLogicLayer #
{ 
readonly 
LogFileHelper 
_logger &
;& '
public 
BusinessLogicLayer !
(! "
)" #
{ 	
_logger 
= 
new 
LogFileHelper '
(' (
)( )
;) *
} 	
public 
void "
CreateFunctionfromFile *
(* +
string+ 1
fileName2 :
,: ;
string< B
fileContentC N
)N O
{ 	
try 
{ 
_logger 
. 
WriteToFile #
(# $
$str$ >
+? @
fileNameA I
)I J
;J K
_logger 
. 
WriteToFile #
(# $
$str$ +
)+ ,
;, -
DataAccessLayer 
obj  #
=$ %
new& )
DataAccessLayer* 9
(9 :
): ;
;; <
	DataTable 
dt 
= 
obj "
." #(
GenericExecution_Destination# ?
(? @
fileContent@ K
)K L
;L M
_logger 
. 
WriteToFile #
(# $
$str$ <
+= >
fileName? G
)G H
;H I
} 
catch 
( 
	Exception 
ex 
)  
{   
_logger!! 
.!! 
WriteToFile!! #
(!!# $
$str!!$ B
+!!C D
fileName!!E M
+!!N O
$str!!P _
+!!` a
ex!!b d
.!!d e
Message!!e l
)!!l m
;!!m n
}"" 
}## 	
public$$ 
	DataTable$$ 
GetDatafromQuery$$ )
($$) *
string$$* 0
sql$$1 4
,$$4 5
string$$6 <
	tableName$$= F
)$$F G
{%% 	
DataAccessLayer&& 
objDAL&& "
=&&# $
new&&% (
DataAccessLayer&&) 8
(&&8 9
)&&9 :
;&&: ;
	DataTable'' 
dt'' 
='' 
objDAL'' !
.''! "
CustomQuery''" -
(''- .
sql''. 1
)''1 2
;''2 3
return(( 
dt(( 
;(( 
})) 	
public** 
	DataTable** 
MyCustomQuery** &
(**& '
string**' -
sql**. 1
)**1 2
{++ 	
DataAccessLayer,, 
objDAL,, "
=,,# $
new,,% (
DataAccessLayer,,) 8
(,,8 9
),,9 :
;,,: ;
	DataTable-- 
dt-- 
=-- 
objDAL-- !
.--! "
CustomQuery--" -
(--- .
sql--. 1
)--1 2
;--2 3
return// 
dt// 
;// 
}00 	
public22 
	DataTable22 %
GetDatafromQueryandInsert22 2
(222 3
string223 9
sql22: =
,22= >
string22? E
	tableName22F O
)22O P
{33 	
DataAccessLayer44 
objDAL44 "
=44# $
new44% (
DataAccessLayer44) 8
(448 9
)449 :
;44: ;
	DataTable55 
dt55 
=55 
objDAL55 !
.55! "
CustomQuery55" -
(55- .
sql55. 1
)551 2
;552 3
InsertDatatoTable66 
(66 
	tableName66 '
,66' (
dt66) +
)66+ ,
;66, -
return77 
dt77 
;77 
}88 	
public99 
static99 
string99 
DumpDataTable99 *
(99* +
	DataTable99+ 4
table995 :
)99: ;
{:: 	
string;; 
data;; 
=;; 
string;;  
.;;  !
Empty;;! &
;;;& '
StringBuilder<< 
sb<< 
=<< 
new<< "
StringBuilder<<# 0
(<<0 1
)<<1 2
;<<2 3
if>> 
(>> 
null>> 
!=>> 
table>> 
&&>>  
null>>! %
!=>>& (
table>>) .
.>>. /
Rows>>/ 3
)>>3 4
{?? 
foreach@@ 
(@@ 
DataRow@@  
dataRow@@! (
in@@) +
table@@, 1
.@@1 2
Rows@@2 6
)@@6 7
{AA 
foreachBB 
(BB 
varBB  
itemBB! %
inBB& (
dataRowBB) 0
.BB0 1
	ItemArrayBB1 :
)BB: ;
{CC 
sbDD 
.DD 
AppendDD !
(DD! "
itemDD" &
)DD& '
;DD' (
sbEE 
.EE 
AppendEE !
(EE! "
$charEE" %
)EE% &
;EE& '
}FF 
sbGG 
.GG 

AppendLineGG !
(GG! "
)GG" #
;GG# $
}HH 
dataJJ 
=JJ 
sbJJ 
.JJ 
ToStringJJ "
(JJ" #
)JJ# $
;JJ$ %
}KK 
returnLL 
dataLL 
;LL 
}MM 	
publicOO 
voidOO 
InsertDatatoTableOO %
(OO% &
stringOO& ,
	tablenameOO- 6
,OO6 7
	DataTableOO8 A
dtOOB D
)OOD E
{PP 	
tryQQ 
{RR 
ConsoleTT 
.TT 
	WriteLineTT !
(TT! "
$strTT" 9
+TT: ;
	tablenameTT< E
)TTE F
;TTF G
forUU 
(UU 
intUU 
rowCountUU !
=UU" #
$numUU$ %
;UU% &
rowCountUU' /
<UU0 1
dtUU2 4
.UU4 5
RowsUU5 9
.UU9 :
CountUU: ?
;UU? @
rowCountUUA I
++UUI K
)UUK L
{VV 
stringWW 
sqlWW 
=WW  
$strWW! /
+WW0 1
	tablenameWW2 ;
+WW< =
$strWW> H
;WWH I
stringXX 
valuesXX !
=XX" #
$strXX$ &
;XX& '
forYY 
(YY 
intYY 
columnCountYY (
=YY) *
$numYY+ ,
;YY, -
columnCountYY. 9
<YY: ;
dtYY< >
.YY> ?
ColumnsYY? F
.YYF G
CountYYG L
;YYL M
columnCountYYN Y
++YYY [
)YY[ \
{ZZ 
string[[ 
columnvalue[[ *
=[[+ ,
Convert[[- 4
.[[4 5
ToString[[5 =
([[= >
dt[[> @
.[[@ A
Rows[[A E
[[[E F
rowCount[[F N
][[N O
[[[O P
columnCount[[P [
][[[ \
)[[\ ]
;[[] ^
;[[_ `
if\\ 
(\\ 
dt\\ 
.\\ 
Rows\\ #
[\\# $
rowCount\\$ ,
]\\, -
[\\- .
columnCount\\. 9
]\\9 :
.\\: ;
GetType\\; B
(\\B C
)\\C D
.\\D E
Name\\E I
==\\J L
$str\\M U
||\\V X
dt\\Y [
.\\[ \
Rows\\\ `
[\\` a
rowCount\\a i
]\\i j
[\\j k
columnCount\\k v
]\\v w
.\\w x
GetType\\x 
(	\\ 
)
\\ 
.
\\ 
Name
\\ 
==
\\ 
$str
\\ 
||
\\ 
dt
\\ 
.
\\ 
Rows
\\ 
[
\\  
rowCount
\\  ¨
]
\\¨ ©
[
\\© ª
columnCount
\\ª µ
]
\\µ ¶
.
\\¶ ·
GetType
\\· ¾
(
\\¾ ¿
)
\\¿ À
.
\\À Á
Name
\\Á Å
==
\\Æ È
$str
\\É Ó
)
\\Ó Ô
{]] 
if__ 
(__  
columnvalue__  +
.__+ ,
Contains__, 4
(__4 5
$str__5 8
)__8 9
)__9 :
{`` 
columnvalueaa  +
=aa, -
columnvalueaa. 9
.aa9 :
Replaceaa: A
(aaA B
$straaB E
,aaE F
$straaG K
)aaK L
;aaL M
}bb 
elsecc  
ifcc! #
(cc$ %
columnvaluecc% 0
.cc0 1
Containscc1 9
(cc9 :
$strcc: >
)cc> ?
)cc? @
{dd 
columnvalueee  +
=ee, -
columnvalueee. 9
.ee9 :
Replaceee: A
(eeA B
$streeB F
,eeF G
$streeH N
)eeN O
;eeO P
}ff 
ifgg 
(gg  
columnvaluegg  +
==gg, .
$strgg/ 3
)gg3 4
{hh 
columnvalueii  +
=ii, -
$strii. 7
;ii7 8
}jj 
elsekk  
{ll 
ifnn  "
(nn# $
!nn$ %
stringnn% +
.nn+ ,
IsNullOrEmptynn, 9
(nn9 :
columnvaluenn: E
)nnE F
)nnF G
{oo  !
ifpp$ &
(pp' (
dtpp( *
.pp* +
Rowspp+ /
[pp/ 0
rowCountpp0 8
]pp8 9
[pp9 :
columnCountpp: E
]ppE F
.ppF G
GetTypeppG N
(ppN O
)ppO P
.ppP Q
NameppQ U
==ppV X
$strppY c
)ppc d
{qq$ %
ifss( *
(ss+ ,
columnvaluess, 7
.ss7 8
Splitss8 =
(ss= >
$charss> A
)ssA B
.ssB C
LengthssC I
==ssJ L
$numssM N
)ssN O
{tt( )
varuu, /
regexuu0 5
=uu6 7
newuu8 ;
Regexuu< A
(uuA B
RegexuuB G
.uuG H
EscapeuuH N
(uuN O
$struuO R
)uuR S
)uuS T
;uuT U
columnvaluevv, 7
=vv8 9
regexvv: ?
.vv? @
Replacevv@ G
(vvG H
columnvaluevvH S
,vvS T
$strvvU \
,vv\ ]
$numvv^ _
)vv_ `
;vv` a
}ww( )
}xx$ %
}yy  !
columnvaluezz  +
=zz, -
$strzz. 1
+zz2 3
columnvaluezz4 ?
+zz@ A
$strzzB E
;zzE F
}|| 
}}} 
else~~ 
if~~ 
(~~  !
dt~~! #
.~~# $
Rows~~$ (
[~~( )
rowCount~~) 1
]~~1 2
[~~2 3
columnCount~~3 >
]~~> ?
.~~? @
GetType~~@ G
(~~G H
)~~H I
.~~I J
Name~~J N
.~~N O
ToLower~~O V
(~~V W
)~~W X
==~~Y [
(~~\ ]
$str~~] e
)~~e f
.~~f g
ToLower~~g n
(~~n o
)~~o p
)~~p q
{ 
var
 
nullable
  (
=
) *
DBNull
+ 1
.
1 2
Value
2 7
;
7 8
columnvalue
 '
=
( )
$str
* 0
;
0 1
}
 
values
 
=
  
values
! '
+
( )
$str
* -
+
. /
columnvalue
0 ;
;
; <
}
 
if
 
(
 
!
 
string
 
.
  
IsNullOrEmpty
  -
(
- .
values
. 4
)
4 5
)
5 6
{
 
values
 
=
  
values
! '
.
' (
	Substring
( 1
(
1 2
$num
2 3
,
3 4
values
5 ;
.
; <
Length
< B
-
C D
$num
E F
)
F G
;
G H
}
 
string
 
insertQuery
 &
=
' (
sql
) ,
+
- .
values
/ 5
+
6 7
$str
8 <
;
< =
DataAccessLayer
 #
objDAL
$ *
=
+ ,
new
- 0
DataAccessLayer
1 @
(
@ A
)
A B
;
B C
objDAL
 
.
 *
GenericExecution_Destination
 7
(
7 8
insertQuery
8 C
)
C D
;
D E
}
 
}
 
catch
 
(
 
	Exception
 
ex
 
)
  
{
 
_logger
 
.
 
WriteToFile
 #
(
# $
$str
$ E
+
F G
ex
H J
.
J K
Message
K R
)
R S
;
S T
}
 
}
 	
public
 
void
 
	CleanData
 
(
 
string
 $
	tableName
% .
)
. /
{
 	
DataAccessLayer
 
objDAL
 "
=
# $
new
% (
DataAccessLayer
) 8
(
8 9
)
9 :
;
: ;
objDAL
 
.
 (
CleanTableData_Destination
 -
(
- .
	tableName
. 7
)
7 8
;
8 9
}
 	
public
 
	DataTable
 
CreateDataTable
 )
<
) *
T
* +
>
+ ,
(
, -
IEnumerable
- 8
<
8 9
T
9 :
>
: ;
list
< @
)
@ A
{
 	
Type
 
type
 
=
 
typeof
 
(
 
T
  
)
  !
;
! "
var
 

properties
 
=
 
type
 !
.
! "
GetProperties
" /
(
/ 0
)
0 1
;
1 2
	DataTable
¡¡ 
	dataTable
¡¡ 
=
¡¡  !
new
¡¡" %
	DataTable
¡¡& /
(
¡¡/ 0
)
¡¡0 1
;
¡¡1 2
foreach
¢¢ 
(
¢¢ 
PropertyInfo
¢¢ !
info
¢¢" &
in
¢¢' )

properties
¢¢* 4
)
¢¢4 5
{
££ 
	dataTable
¤¤ 
.
¤¤ 
Columns
¤¤ !
.
¤¤! "
Add
¤¤" %
(
¤¤% &
new
¤¤& )

DataColumn
¤¤* 4
(
¤¤4 5
info
¤¤5 9
.
¤¤9 :
Name
¤¤: >
,
¤¤> ?
Nullable
¤¤@ H
.
¤¤H I
GetUnderlyingType
¤¤I Z
(
¤¤Z [
info
¤¤[ _
.
¤¤_ `
PropertyType
¤¤` l
)
¤¤l m
??
¤¤n p
info
¤¤q u
.
¤¤u v
PropertyType¤¤v 
)¤¤ 
)¤¤ 
;¤¤ 
}
¥¥ 
foreach
§§ 
(
§§ 
T
§§ 
entity
§§ 
in
§§  
list
§§! %
)
§§% &
{
¨¨ 
object
©© 
[
©© 
]
©© 
values
©© 
=
©©  !
new
©©" %
object
©©& ,
[
©©, -

properties
©©- 7
.
©©7 8
Length
©©8 >
]
©©> ?
;
©©? @
for
ªª 
(
ªª 
int
ªª 
i
ªª 
=
ªª 
$num
ªª 
;
ªª 
i
ªª  !
<
ªª" #

properties
ªª$ .
.
ªª. /
Length
ªª/ 5
;
ªª5 6
i
ªª7 8
++
ªª8 :
)
ªª: ;
{
«« 
values
¬¬ 
[
¬¬ 
i
¬¬ 
]
¬¬ 
=
¬¬ 

properties
¬¬  *
[
¬¬* +
i
¬¬+ ,
]
¬¬, -
.
¬¬- .
GetValue
¬¬. 6
(
¬¬6 7
entity
¬¬7 =
)
¬¬= >
;
¬¬> ?
}
­­ 
	dataTable
¯¯ 
.
¯¯ 
Rows
¯¯ 
.
¯¯ 
Add
¯¯ "
(
¯¯" #
values
¯¯# )
)
¯¯) *
;
¯¯* +
}
°° 
return
²² 
	dataTable
²² 
;
²² 
}
³³ 	
public
µµ 
string
µµ 
ReturnNullIfEmpty
µµ '
(
µµ' (
string
µµ( .
value
µµ/ 4
)
µµ4 5
{
¶¶ 	
if
¹¹ 
(
¹¹ 
!
¹¹ 
string
¹¹ 
.
¹¹ 
IsNullOrEmpty
¹¹ %
(
¹¹% &
value
¹¹& +
)
¹¹+ ,
)
¹¹, -
{
ºº 
return
»» 
$str
»» 
+
»» 
value
»» "
+
»»# $
$str
»»% (
;
»»( )
}
¼¼ 
return
½½ 
$str
½½ 
;
½½ 
}
¾¾ 	
}
¿¿ 
}ÀÀ ©
~D:\AccionLabs\Help\AutomatedTestCases\HSVS.AutomatedTestCases\HSVS.AutomatedTestCases.BusinessLogic\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str @
)@ A
]A B
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str B
)B C
]C D
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *